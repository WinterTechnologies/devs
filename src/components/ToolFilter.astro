---
interface Props {
  categories: string[];
}

const { categories } = Astro.props;
---

<div class="flex flex-wrap gap-4">
  <!-- Search Box -->
  <input
    type="text"
    id="searchFilter"
    placeholder="Search..."
    class="px-4 py-2 rounded-lg border border-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-600 w-full sm:w-auto"
  />

  <!-- Category Filter -->
  <select
    id="categoryFilter"
    class="px-4 py-2 rounded-lg border border-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-600"
  >
    <option value="all">All Categories</option>
    {
      categories.map((category) => (
        <option value={category}>
          {String(category).charAt(0).toUpperCase() + String(category).slice(1)}
        </option>
      ))
    }
  </select>

  <!-- Pricing Filter -->
  <select
    id="priceFilter"
    class="px-4 py-2 rounded-lg border border-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-600"
  >
    <option value="all">All Pricing Models</option>
    <option value="Free">Free</option>
    <option value="Paid">Paid</option>
    <option value="Freemium">Freemium</option>
  </select>

  <!-- Platform Filter -->
  <select
    name="platformFilter"
    id="platformFilter"
    class="px-4 py-2 rounded-lg border border-gray-700 focus:outline-none focus:ring-2 focus:ring-purple-600"
  >
    <option value="all">All Platforms</option>
    <option value="Windows">Windows</option>
    <option value="macOS">macOS</option>
    <option value="Linux">Linux</option>
    <option value="Web">Web</option>
    <option value="Mobile">Mobile</option>
  </select>
</div>

<!-- Tool Count -->
<p id="toolCount" class="mt-4 text-sm text-gray-600">Showing all tools.</p>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const searchFilter = document.getElementById("searchFilter");
    const categoryFilter = document.getElementById("categoryFilter");
    const priceFilter = document.getElementById("priceFilter");
    const platformFilter = document.getElementById("platformFilter");
    const toolCards = document.querySelectorAll("[data-category]");
    const toolCount = document.getElementById("toolCount");

    function updateVisibility() {
      const searchTerm = searchFilter.value.toLowerCase();
      const selectedCategory = categoryFilter.value.toLowerCase();
      const selectedPrice = priceFilter.value.toLowerCase();
      const selectedPlatform = platformFilter.value.toLowerCase();

      let visibleCount = 0;

      toolCards.forEach((card) => {
        const cardTitle = card.querySelector("h2")?.textContent.toLowerCase();
        const cardDescription = card
          .querySelector("p")
          ?.textContent.toLowerCase();
        const cardContent = card
          .querySelector("#card-content")
          ?.textContent.toLowerCase();
        const cardCategory = card.getAttribute("data-category")?.toLowerCase();
        const cardPrice = card.getAttribute("data-price")?.toLowerCase();
        const cardPlatform = card.getAttribute("data-platform")?.toLowerCase();

        const platformList = cardPlatform?.split(",") || [];

        const matchesSearch =
          searchTerm === "" ||
          (cardTitle && cardTitle.includes(searchTerm)) ||
          (cardDescription && cardDescription.includes(searchTerm)) ||
          (cardContent && cardContent.includes(searchTerm));

        const matchesCategory =
          selectedCategory === "all" || cardCategory === selectedCategory;

        const matchesPrice =
          selectedPrice === "all" || cardPrice === selectedPrice;

        const matchesPlatform =
          selectedPlatform === "all" || platformList.includes(selectedPlatform);

        if (
          matchesSearch &&
          matchesCategory &&
          matchesPrice &&
          matchesPlatform
        ) {
          card.classList.remove("hidden");
          visibleCount++;
        } else {
          card.classList.add("hidden");
        }
      });

      // Update the tool count
      if (visibleCount === 0) {
        toolCount.textContent = "No tools found.";
      } else if (visibleCount === 1) {
        toolCount.textContent = "Showing 1 tool.";
      } else {
        toolCount.textContent = `Showing ${visibleCount} tools.`;
      }
    }

    // Attach event listeners
    searchFilter?.addEventListener("input", updateVisibility);
    categoryFilter?.addEventListener("change", updateVisibility);
    priceFilter?.addEventListener("change", updateVisibility);
    platformFilter?.addEventListener("change", updateVisibility);

    // Initial visibility update
    updateVisibility();
  });
</script>
